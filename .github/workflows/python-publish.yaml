# name: Python Package CI/CD

# on:
#   release:
#     types: [published]

# permissions:
#   contents: read  # Allow the action to read the repository contents
#   id-token: write  # Write access for publishing to PyPI

# jobs:
#   deploy:
#     runs-on: ubuntu-latest  # Can be adjusted based on your needs

#     steps:
#     # Step 1: Checkout the repository code
#     - name: Checkout code
#       uses: actions/checkout@v3

#     # Step 2: Set up Python environment (you can change version if needed)
#     - name: Set up Python
#       uses: actions/setup-python@v3
#       with:
#         python-version: '3.8'  # Use Python 3.8 or adjust as needed

#     # Step 3: Install dependencies (Pin versions for stability)
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install build==0.8.0 twine==4.0.0  # Pin versions for build and twine
#         pip install -r requirements.txt  # Install runtime dependencies from requirements.txt

#     # Step 4: Run tests with pytest (optional but recommended)
#     - name: Run tests with pytest
#       run: |
#         pip install pytest
#         pytest tests/ --maxfail=5 --disable-warnings -v  # Run tests in the 'tests/' folder, adjust as needed

#     # Step 5: Build the package
#     - name: Build the package
#       run: |
#         python -m build  # Build the package using setuptools (produces source distribution and wheel)

#     # Step 6: Publish to PyPI using Twine
#     - name: Publish to PyPI
#       run: |
#         python -m twine upload dist/*  # Upload the built package to PyPI using Twine
#       env:
#         TWINE_USERNAME: __token__  # Use PyPI's token-based authentication
#         TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}  # PyPI token from GitHub Secrets

#     # Step 7: Notify success (Optional)
#     - name: Notify success
#       run: echo "Package successfully published to PyPI!"  # Optional success message



name: Python Package CI/CD

on:
  release:
    types: [published]  # Trigger on release published (existing)
  workflow_dispatch:  # Add manual trigger option
    inputs:
      version:
        description: 'Version of the release'
        required: true
        default: 'v1.0.0'  # Default value for the version

permissions:
  contents: read  # Allow the action to read the repository contents
  id-token: write  # Write access for publishing to PyPI

jobs:
  deploy:
    runs-on: ubuntu-latest  # Can be adjusted based on your needs

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -r requirements.txt

    - name: Build the package
      run: |
        python -m build  # Build the package using setuptools

    - name: Publish to PyPI
      run: |
        python -m twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

    - name: Notify success
      run: echo "Package successfully published to PyPI!"
